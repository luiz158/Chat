package chat.client;

import static chat.client.CommonSettings.*;
import chat.client.net.SocksSocket;
import chat.client.net.SocksSocketImplFactory;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

public class ChatClient1 extends javax.swing.JFrame implements Runnable {

    private Image imgLogo, imgBanner;
    private MediaTracker tracker;
    private Image[] iconArray;
    protected PrivateChat[] privateWindows;
    protected int count, iconCount, privateWindowCount;
    private InformationDialog dialog;
    private Toolkit theKit;
    private String chatLogo, bannerName;
    private StringBuffer stringBuffer;
    private String appletStatus;

    /**
     * Creates new form ChatClient1
     */
    public ChatClient1() {
        /**
         * ********Getting all the Parameters**********
         */
        userName = "";
        userRoom = "";
        roomList = "";
        isProxy = false;
        chatLogo = "images/logo.gif";
        bannerName = "images/defaultbanner.gif";
        iconCount = 21;

        /**
         * ********Loading Images********
         */
        theKit = this.getToolkit();
        tracker = new MediaTracker(this);
        int imageCount = 0;
        imgLogo = theKit.getImage(chatLogo);
        tracker.addImage(imgLogo, imageCount);
        imageCount++;
        imgBanner = theKit.getImage(bannerName);
        tracker.addImage(imgBanner, imageCount);
        imageCount++;

        /**
         * ********Loading Icons....**********
         */
        iconArray = new Image[iconCount];
        for (count = 0; count < iconCount; count++) {
            iconArray[count] = theKit.getImage("icons/photo" + count + ".gif");
            tracker.addImage(iconArray[count], imageCount);
            imageCount++;
        }

        /**
         * *******Initialize Private Window *********
         */
        privateWindows = new PrivateChat[MAX_PRIVATE_WINDOW];
        privateWindowCount = 0;

        try {
            setAppletStatus("Loading Images and Icons.....");
            tracker.waitForAll();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        setIconImage(theKit.getImage("images/logo.gif"));
        setAppletStatus("");
        /**
         * ********Initializing all the Components********
         */
        initComponents();
        userListModel = new DefaultListModel<>();
        userCanvas.setModel(userListModel);

        roomListModel = new DefaultListModel<>();
        roomCanvas.setModel(roomListModel);
        
        loginToChat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        logoPanel = new javax.swing.JPanel();
        bannerPanel = new javax.swing.JPanel();
        centerPanel = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        textBoxPanel = new javax.swing.JPanel();
        lblGeneral = new javax.swing.JLabel();
        textMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        inputButtonPanel = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        emptyPanel = new javax.swing.JPanel();
        informationPanel = new javax.swing.JPanel();
        informationLabel = new javax.swing.JLabel();
        tapPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        userPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userCanvas = new javax.swing.JList<>();
        userButtonPanel = new javax.swing.JPanel();
        btnSendDirect = new javax.swing.JButton();
        btnIgnoreUser = new javax.swing.JButton();
        roomPanel = new javax.swing.JPanel();
        roomScrollPane = new javax.swing.JScrollPane();
        roomCanvas = new javax.swing.JList<>();
        roomButtonPanel = new javax.swing.JPanel();
        roomCountPanel = new javax.swing.JPanel();
        lblCaption = new javax.swing.JLabel();
        txtUserCount = new javax.swing.JTextField();
        btnChangeRoom = new javax.swing.JButton();
        imagesPanel = new javax.swing.JPanel();
        userScrollPane = new javax.swing.JScrollPane();
        imageCanvas = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageCanvas = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        loginMenu = new javax.swing.JMenu();
        loginItem = new javax.swing.JMenuItem();
        disconnectItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PRODUCT_NAME");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        topPanel.setLayout(new java.awt.BorderLayout());

        logoPanel.setLayout(new java.awt.BorderLayout());
        topPanel.add(logoPanel, java.awt.BorderLayout.EAST);

        bannerPanel.setLayout(new java.awt.BorderLayout());
        topPanel.add(bannerPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setLayout(new java.awt.BorderLayout());

        inputPanel.setLayout(new java.awt.BorderLayout());

        textBoxPanel.setLayout(new java.awt.BorderLayout());

        lblGeneral.setText("General Message! ");
        textBoxPanel.add(lblGeneral, java.awt.BorderLayout.WEST);
        textBoxPanel.add(textMessage, java.awt.BorderLayout.CENTER);

        btnSend.setText("Send Message!");
        textBoxPanel.add(btnSend, java.awt.BorderLayout.LINE_END);

        inputPanel.add(textBoxPanel, java.awt.BorderLayout.CENTER);

        inputButtonPanel.setLayout(new java.awt.BorderLayout());

        btnExit.setText("Exit Chat");
        inputButtonPanel.add(btnExit, java.awt.BorderLayout.PAGE_START);

        inputPanel.add(inputButtonPanel, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        inputPanel.add(emptyPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.add(inputPanel, java.awt.BorderLayout.PAGE_END);

        informationPanel.setLayout(new java.awt.BorderLayout());

        informationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationLabel.setText("Information Label");
        informationPanel.add(informationLabel, java.awt.BorderLayout.LINE_END);

        centerPanel.add(informationPanel, java.awt.BorderLayout.NORTH);

        tapPanel.setLayout(new java.awt.BorderLayout());

        userPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(userCanvas);

        userPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        userButtonPanel.setLayout(new java.awt.BorderLayout());

        btnSendDirect.setText("Send Direct Message");
        userButtonPanel.add(btnSendDirect, java.awt.BorderLayout.NORTH);

        btnIgnoreUser.setText("Ignore User");
        userButtonPanel.add(btnIgnoreUser, java.awt.BorderLayout.SOUTH);

        userPanel.add(userButtonPanel, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("User   ", userPanel);

        roomPanel.setLayout(new java.awt.BorderLayout());

        roomScrollPane.setViewportView(roomCanvas);

        roomPanel.add(roomScrollPane, java.awt.BorderLayout.CENTER);

        roomButtonPanel.setLayout(new java.awt.BorderLayout());

        roomCountPanel.setLayout(new java.awt.BorderLayout());

        lblCaption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaption.setText("ROOM COUNT");
        lblCaption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roomCountPanel.add(lblCaption, java.awt.BorderLayout.NORTH);

        txtUserCount.setEditable(false);
        txtUserCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomCountPanel.add(txtUserCount, java.awt.BorderLayout.CENTER);

        btnChangeRoom.setText("Change Room");
        roomCountPanel.add(btnChangeRoom, java.awt.BorderLayout.PAGE_END);

        roomButtonPanel.add(roomCountPanel, java.awt.BorderLayout.PAGE_START);

        roomPanel.add(roomButtonPanel, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Rooms", roomPanel);

        imagesPanel.setLayout(new java.awt.BorderLayout());

        userScrollPane.setViewportView(imageCanvas);

        imagesPanel.add(userScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Images", imagesPanel);

        tapPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        centerPanel.add(tapPanel, java.awt.BorderLayout.LINE_END);

        jScrollPane2.setViewportView(messageCanvas);

        centerPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        loginMenu.setText("Login");

        loginItem.setText("Login");
        loginMenu.add(loginItem);

        disconnectItem.setText("Logout");
        loginMenu.add(disconnectItem);
        loginMenu.add(jSeparator1);

        exitItem.setText("Exit");
        loginMenu.add(exitItem);

        menuBar.add(loginMenu);

        helpMenu.setText("Help");

        aboutItem.setText("About" + PRODUCT_NAME);
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        disconnectChat();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatClient1().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JPanel bannerPanel;
    private javax.swing.JButton btnChangeRoom;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIgnoreUser;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendDirect;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenuItem disconnectItem;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextPane imageCanvas;
    private javax.swing.JPanel imagesPanel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JPanel inputButtonPanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCaption;
    private javax.swing.JLabel lblGeneral;
    private javax.swing.JMenuItem loginItem;
    private javax.swing.JMenu loginMenu;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextPane messageCanvas;
    private javax.swing.JPanel roomButtonPanel;
    private javax.swing.JList<String> roomCanvas;
    private javax.swing.JPanel roomCountPanel;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JScrollPane roomScrollPane;
    private javax.swing.JPanel tapPanel;
    private javax.swing.JPanel textBoxPanel;
    private javax.swing.JTextField textMessage;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtUserCount;
    private javax.swing.JPanel userButtonPanel;
    private javax.swing.JList<String> userCanvas;
    private javax.swing.JPanel userPanel;
    private javax.swing.JScrollPane userScrollPane;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<String> userListModel , roomListModel;
    
    //For future Network class 
    private String userName, serverData, roomList, splitString;
    private String userRoom, serverName, proxyHost;
    private int serverPort, proxyPort, totalUserCount;
    private boolean startFlag, isProxy;
    private Socket socket;
    private BufferedReader in; //private DataInputStream in;
    private DataOutputStream out;

    private Thread thread;
    private StringTokenizer tokenizer;

    private void loginToChat() {
        /**
         * ******* Open the Dialog ********
         */
        dialog = new InformationDialog(this);
        if (dialog.isConnect) {
            userName = dialog.getTxtUserName();
            //UserRoom 	= dialog.roomchoice.getSelectedItem();
            serverName = dialog.getTxtServerName();
            serverPort = Integer.parseInt(dialog.getTxtServerPort());
            if (dialog.isProxyCheckBox()) {//getState()
                isProxy = true;
                proxyHost = dialog.getTxtProxyHost();
                proxyPort = Integer.parseInt(dialog.getTxtProxyPort());
            } else {
                isProxy = false;
            }
            connectToServer();
        }
    }

    private void sendMessageToServer(String message) {
        try {
            out.writeBytes(message + "\r\n");
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_DEFAULT);
            ie.printStackTrace();
        }
    }

    /**
     * *******Function to Destroy all the Objects*******
     */
    private void quitConnection(int QuitType) {
        if (socket != null) {
            try {
                if (QuitType == QUIT_TYPE_DEFAULT) {
                    sendMessageToServer("QUIT " + userName + "~" + userRoom);
                }
                if (QuitType == QUIT_TYPE_KICK) {
                    sendMessageToServer("KICK " + userName + "~" + userRoom);
                }
                socket.close();
                socket = null;               
                userListModel.clear(); //tapPanel.userCanvas.clearAll();
            } catch (IOException ie) {
                ie.printStackTrace();
            }
        }
        if (thread != null) {
            thread.interrupt();//stop();
            thread = null;
        }
        disableAll();
        startFlag = false;
        setAppletStatus("ADMIN: CONNECTION TO THE SERVER CLOSED.");
    }

    /**
     * ******Implements the Thread ***************
     */
    @Override
    public void run() {
        while (thread != null) {
            try {
                serverData = in.readLine();
                /**
                 * ******* LIST UserName;UserName; RFC Coding**********
                 */
                if (serverData.startsWith("LIST")) {
                    tokenizer = new StringTokenizer(serverData.substring(5), ";");
                    /**
                     * ******Update the Information Label ********
                     */
                    totalUserCount = tokenizer.countTokens();
                    updateInformationLabel();
                    /**
                     * ********Add User Item into User Canvas ********
                     */
                    userListModel.clear();//tapPanel.userCanvas.clearAll();
                    while (tokenizer.hasMoreTokens()) {
                        userListModel.addElement(tokenizer.nextToken()); //tapPanel.userCanvas.addListItemToMessageObject(tokenizer.nextToken());
                    }

                    messageCanvas.setText("");//messageCanvas.ClearAll();
                    appendToPane(messageCanvas,"<span> Welcome To The " + userRoom + " Room!</span>");
                    //messageCanvas.addMessageToMessageObject("Welcome To The " + userRoom + " Room!", MESSAGE_TYPE_JOIN);
                }

                /**
                 * *******Room RFC *******
                 */
                if (serverData.startsWith("ROOM")) {
                    /**
                     * ******** Loading Room List in to Room Canvas
                     * *************
                     */
                    tokenizer = new StringTokenizer(serverData.substring(5), ";");
                    userRoom = tokenizer.nextToken();
                    updateInformationLabel();
                    /**
                     * ********Add User Item into User Canvas ********
                     */
                    roomListModel.clear();//tapPanel.roomCanvas.clearAll();
                    roomListModel.addElement(userRoom);//tapPanel.roomCanvas.addListItemToMessageObject(userRoom);
                    while (tokenizer.hasMoreTokens()) {
                        roomListModel.addElement(tokenizer.nextToken());   
                        //tapPanel.roomCanvas.addListItemToMessageObject(tokenizer.nextToken());
                    }                  
                }

                /**
                 * ******** ADD RFC ********
                 */
                if (serverData.startsWith("ADD")) {
                    /**
                     * ******Update the Information Label ********
                     */
                    totalUserCount++;
                    updateInformationLabel();

                    /**
                     * ********Add User Item into User Canvas ********
                     */
                    splitString = serverData.substring(5);
                    enablePrivateWindow(splitString);
                    userListModel.addElement(splitString);//tapPanel.userCanvas.addListItemToMessageObject(splitString);
                    appendToPane(messageCanvas, "<span>" + splitString + " joins chat...</span>");
                            //messageCanvas.addMessageToMessageObject(splitString + " joins chat...", MESSAGE_TYPE_JOIN);
                }

                /**
                 * *******If User Name Already Exists *********
                 */
                if (serverData.startsWith("EXIS")) {
                    appendToPane(messageCanvas,"<span> User Name Already Exists... Try Again With Some Other Name!</span>");
                    //messageCanvas.addMessageToMessageObject(" User Name Already Exists... Try Again With Some Other Name!", MESSAGE_TYPE_ADMIN);
                    thread = null;
                    quitConnection(QUIT_TYPE_NULL);
                }

                /**
                 * ****** REMOVE User RFC Coding *********
                 */
                if (serverData.startsWith("REMO")) {
                    splitString = serverData.substring(5); //REMO~NAME

                    //tapPanel.userCanvas.removeListItem(splitString);
                    userListModel.removeElement(splitString);

                    removeUserFromPrivateChat(splitString);
                    appendToPane(messageCanvas,"<span>" +splitString + " has been logged Out from Chat!</span>");
                    //messageCanvas.addMessageToMessageObject(splitString + " has been logged Out from Chat!", MESSAGE_TYPE_LEAVE);

                    /**
                     * ***Update the Information Label *******
                     */
                    totalUserCount--;
                    updateInformationLabel();

                }

                /**
                 * ****** MESS RFC Coding Starts *********
                 */
                if (serverData.startsWith("MESS")) {
                    /**
                     * ** Check whether ignored user ********
                     */
                    if (!(isIgnoredUser(serverData.substring(5, serverData.indexOf(":"))))) {
                        appendToPane(messageCanvas, "<span>"+serverData.substring(5)+"</span>");
//                        messageCanvas.addMessageToMessageObject(serverData.substring(5), MESSAGE_TYPE_DEFAULT);
                    }
                }

                /**
                 * *** KICK RFC Starts **********
                 */
                if (serverData.startsWith("KICK")) {
                    appendToPane(messageCanvas, "<span>You are Kicked Out From Chat for flooding the message!</span>");
//                    messageCanvas.addMessageToMessageObject("You are Kicked Out From Chat for flooding the message!", MESSAGE_TYPE_ADMIN);
                    thread = null;
                    quitConnection(QUIT_TYPE_KICK);
                }

                /**
                 * *** INKI RFC (Information about kicked off User ********
                 */
                if (serverData.startsWith("INKI")) {
                    splitString = serverData.substring(5);
                    //tapPanel.userCanvas.removeListItem(splitString);
                    userListModel.removeElement(splitString);
                    removeUserFromPrivateChat(splitString);
                    appendToPane(messageCanvas,"<span>"+splitString + " has been kicked Out from Chat by the Administrator!</span>");
                    //messageCanvas.addMessageToMessageObject(splitString + " has been kicked Out from Chat by the Administrator!", MESSAGE_TYPE_ADMIN);

                    /**
                     * ***Update the Information Label *******
                     */
                    totalUserCount--;
                    updateInformationLabel();
                }

                /**
                 * *** Change Room RFC *********
                 */
                if (serverData.startsWith("CHRO")) {
                    userRoom = serverData.substring(5);
                }

                /**
                 * ******** Join Room RFC ************
                 */
                if (serverData.startsWith("JORO")) {
                    splitString = serverData.substring(5);
                    userListModel.addElement(splitString);
                    //tapPanel.userCanvas.addListItemToMessageObject(splitString);
                    /**
                     * ***Update the Information Label *******
                     */
                    totalUserCount++;
                    updateInformationLabel();
                    appendToPane(messageCanvas, "<span>" + splitString + " joins chat...</span>");
                    //messageCanvas.addMessageToMessageObject(splitString + " joins chat...", MESSAGE_TYPE_JOIN);
                }

                /**
                 * *********Leave Room RFC *********
                 */
                if (serverData.startsWith("LERO")) {
                    splitString = serverData.substring(5, serverData.indexOf("~"));
                    userListModel.removeElement(splitString);//)tapPanel.userCanvas.removeListItem(splitString);
                    appendToPane(messageCanvas,"<span>" +splitString + " has leaves " + 
                            userRoom + " Room and join into " + 
                            serverData.substring(serverData.indexOf("~") + 1) + 
                            " Room</span>");
                    //messageCanvas.addMessageToMessageObject(splitString + " has leaves " + userRoom + " Room and join into " + serverData.substring(serverData.indexOf("~") + 1) + " Room", MESSAGE_TYPE_ADMIN);

                    /**
                     * ***Update the Information Label *******
                     */
                    totalUserCount--;
                    updateInformationLabel();
                }

                /**
                 * ******** Room Count RFC *******
                 */
                if (serverData.startsWith("ROCO")) {
                    splitString = serverData.substring(5, serverData.indexOf("~"));
                    txtUserCount.setText("Total Users in " + splitString + " : " + serverData.substring(serverData.indexOf("~") + 1));
                }

                /**
                 * ***** Private Message RFC *********
                 */
                if (serverData.startsWith("PRIV")) {
                    splitString = serverData.substring(5, serverData.indexOf(":"));
                    /**
                     * ** Check whether ignored user ********
                     */
                    if (!(isIgnoredUser(splitString))) {
                        boolean PrivateFlag = false;
                        for (count = 0; count < privateWindowCount; count++) {
                            if (privateWindows[count].userName.equals(splitString)) {
                                privateWindows[count].addMessageToMessageCanvas(serverData.substring(5));
                                privateWindows[count].setVisible(true);
                                privateWindows[count].requestFocus();
                                PrivateFlag = true;
                                break;
                            }
                        }

                        if (!(PrivateFlag)) {
                            if (privateWindowCount >= MAX_PRIVATE_WINDOW) {
                                appendToPane(messageCanvas, "<span>You are Exceeding private window limit! So you may lose some message from your friends!</span>");
//                                messageCanvas.addMessageToMessageObject("You are Exceeding private window limit! So you may lose some message from your friends!", MESSAGE_TYPE_ADMIN);
                            } else {
                                privateWindows[privateWindowCount++] = new PrivateChat(this, splitString);
                                privateWindows[privateWindowCount - 1].addMessageToMessageCanvas(serverData.substring(5));
                                privateWindows[privateWindowCount - 1].setVisible(true);
                                privateWindows[privateWindowCount - 1].requestFocus();
                            }
                        }
                    }
                }
            } catch (IOException e) {
                appendToPane(messageCanvas, "<span>"+e.getMessage()+"</span>");
//                messageCanvas.addMessageToMessageObject(e.getMessage(), MESSAGE_TYPE_ADMIN);
                quitConnection(QUIT_TYPE_DEFAULT);
                e.printStackTrace();
            }
        }
    }

    /**
     * ********Setting the appletStatus*******
     */
    private void setAppletStatus(String message) {
        if (messageCanvas != null) {
            appendToPane(messageCanvas,"<span>"+message+"</span>");
            //messageCanvas.addMessageToMessageObject(message, MESSAGE_TYPE_ADMIN);
        }
    }

    /**
     * *******Function To Update the Information Label****
     */
    private void updateInformationLabel() {
        stringBuffer = new StringBuffer();
        stringBuffer.append("User Name: ");
        stringBuffer.append(userName);
        stringBuffer.append("       ");
        stringBuffer.append("Room Name: ");
        stringBuffer.append(userRoom);
        stringBuffer.append("       ");
        stringBuffer.append("No. Of Users: ");
        stringBuffer.append(totalUserCount);
        stringBuffer.append("       ");
        informationLabel.setText(stringBuffer.toString());
    }

    /**
     * *** Function To Disable All Components *******
     */
    private void disableAll() {
        textMessage.setEnabled(false);
        btnSend.setEnabled(false);
        tapPanel.setEnabled(false);
        disconnectItem.setEnabled(false);
        loginItem.setEnabled(true);
        userName = "";
        userRoom = "";
        totalUserCount = 0;
    }

    /**
     * *** Function To Enable All Components *******
     */
    private void enableAll() {
        textMessage.setEnabled(true);
        btnSend.setEnabled(true);
        tapPanel.setEnabled(true);
        disconnectItem.setEnabled(true);
        loginItem.setEnabled(false);
    }

    /**
     * *****Disconnect Chat *******
     */
    private void disconnectChat() {
        if (socket != null) {
            appendToPane(messageCanvas, "<span>CONNECTION TO THE SERVER CLOSED</span>");
//            messageCanvas.addMessageToMessageObject("CONNECTION TO THE SERVER CLOSED", MESSAGE_TYPE_ADMIN);
            quitConnection(QUIT_TYPE_DEFAULT);
        }
    }

    /**
     * *** Enable the Private Chat when the End User logged out***
     */
    private void enablePrivateWindow(String ToUserName) {
        for (count = 0; count < privateWindowCount; count++) {
            if (privateWindows[count].userName.equals(ToUserName)) {
                privateWindows[count].getMessageCanvas().addMessageToMessageObject(ToUserName + " is Currently Online!", MESSAGE_TYPE_ADMIN);
                privateWindows[count].enableAll();
                return;
            }
        }
    }

    /**
     * *** Disable the Private Chat when the End User logged out***
     */
    private void removeUserFromPrivateChat(String ToUserName) {
        for (count = 0; count < privateWindowCount; count++) {
            if (privateWindows[count].userName.equals(ToUserName)) {
                privateWindows[count].getMessageCanvas().addMessageToMessageObject(ToUserName + " is Currently Offline!", MESSAGE_TYPE_ADMIN);
                privateWindows[count].disableAll();
                return;
            }
        }
    }

    /**
     * *****Function To Send Private Message To Server **********
     */
    protected void sentPrivateMessageToServer(String message, String toUserName) {
        sendMessageToServer("PRIV " + toUserName + "~"
                + userName + ": " + message);
    }

    /**
     * ***** Function To Remove Private Window **************
     */
    protected void removePrivateWindow(String ToUserName) {
        int m_UserIndex = 0;
        for (count = 0; count < privateWindowCount; count++) {
            m_UserIndex++;
            if (privateWindows[count].userName.equals(ToUserName)) {
                break;
            }
        }
        for (int m_iLoop = m_UserIndex; m_iLoop < privateWindowCount; m_iLoop++) {
            privateWindows[m_iLoop] = privateWindows[m_iLoop + 1];
        }

        privateWindowCount--;
    }

    /**
     * ******* Function to Change Room ******
     */
    protected void changeRoom() {
        int index = roomCanvas.getSelectedIndex();    
        String user = roomListModel.get(index);
        if (user.equals("")) {
            appendToPane(messageCanvas, "<span> Invalid Room Selection!</span>");
//            messageCanvas.addMessageToMessageObject("Invalid Room Selection!", MESSAGE_TYPE_ADMIN);
            return;
        }

        if (user.equals(userRoom)) {
             appendToPane(messageCanvas, "<span> You are already in that ROOM!</span>");
//            messageCanvas.addMessageToMessageObject("You are already in that ROOM!", MESSAGE_TYPE_ADMIN);
            return;
        }

        sendMessageToServer("CHRO " + userName + "~" + user);
    }

    /**
     * ***** Function to Send a RFC for Get a Room User Count *******
     */
    protected void getRoomUserCount(String RoomName) {
        sendMessageToServer("ROCO " + RoomName);
    }

    /**
     * ****** Function to Set the Image Name into Text Field ***********
     */
    protected void addImageToTextField(String imageName) {
        if (textMessage.getText() == null || textMessage.getText().equals("")) {
            textMessage.setText("~~" + imageName + " ");
        } else {
            textMessage.setText(textMessage.getText() + " "
                    + "~~" + imageName + " ");
        }
    }

    private void connectToServer() {
        /**
         * *********Initialize the Socket******
         */
        messageCanvas.setText("");//messageCanvas.ClearAll();
        appendToPane(messageCanvas, "<span>Connecting To Server... Please Wait...</span>");
//        messageCanvas.addMessageToMessageObject("Connecting To Server... Please Wait...", MESSAGE_TYPE_ADMIN);
        /**
         * *********Initialize the Socket******
         */
        try {
            if (isProxy) {
                /**
                 * *******Proxy**********
                 */
                SocksSocketImplFactory factory
                        = new SocksSocketImplFactory(proxyHost, proxyPort);
                SocksSocket.setSocketImplFactory(factory);
                socket = new SocksSocket(serverName, serverPort);
                socket.setSoTimeout(0);
            } else {
                /**
                 * *****Not Proxy********
                 */
                socket = new Socket(serverName, serverPort);
            }
            out = new DataOutputStream(socket.getOutputStream());
            sendMessageToServer("HELO " + userName);
//            in = new DataInputStream(socket.getInputStream());
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            /**
             * *********Send HELO To Server *********
             */
            startFlag = true;
            thread = new Thread(this);
            thread.start();
            enableAll();
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_NULL);
            ie.printStackTrace();
        }
    }

    /**
     * ****** Function To Send MESS RFC to Server ************
     */
    private void sendMessage() {
        /**
         * ******Sending a Message To Server ********
         */
        sendMessageToServer("MESS " + userRoom + "~" + userName + ": "
                + textMessage.getText());
        appendToPane(messageCanvas, "<span>"+userName + ": " + textMessage.getText() + "...</span>");
        textMessage.setText("");
        textMessage.requestFocus();
    }

    // send html to pane
    private void appendToPane(JTextPane tp, String msg) {
        HTMLDocument doc = (HTMLDocument) tp.getDocument();
        HTMLEditorKit editorKit = (HTMLEditorKit) tp.getEditorKit();
        try {
            editorKit.insertHTML(doc, doc.getLength(), msg, 0, 0, null);
            tp.setCaretPosition(doc.getLength());
        } catch (IOException | BadLocationException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * ********Set or Remove Ignore List from Array *******
     * @param isIgnore
     */
    protected void ignoreUser(boolean isIgnore) {
        if (selectedUser.equals("")) {
            appendToPane(messageCanvas, "<span>Invalid User Selection!</span>");
            //chatClient.getMessageCanvas().addMessageToMessageObject("Invalid User Selection!", MESSAGE_TYPE_ADMIN);
            return;
        }
        if (selectedUser.equals(userName)) {
            appendToPane(messageCanvas, "<span>You can not ignored yourself!</span>");
            //chatClient.getMessageCanvas().addMessageToMessageObject("You can not ignored yourself!", MESSAGE_TYPE_ADMIN);
            return;
        }

        ignoreUser(isIgnore, selectedUser);

    }
    
    protected void ignoreUser(boolean isIgnore, String ignoreUserName) {
        int m_listIndex = getIndexOf(ignoreUserName);
        if (m_listIndex >= 0) {
            messageObject = listArray.get(m_listIndex);
            messageObject.isIgnored = isIgnore;
            listArray.set(m_listIndex, messageObject);

            if (isIgnore) {
                btnIgnoreUser.setText("Allow User");
                appendToPane(messageCanvas, "<span>"+ignoreUserName + " has been ignored!</span>");
                //chatClient.getMessageCanvas().addMessageToMessageObject(ignoreUserName + " has been ignored!", MESSAGE_TYPE_LEAVE);
            } else {
                btnIgnoreUser.setText("Ignore User");
                appendToPane(messageCanvas, "<span>"+ignoreUserName + " has been romoved from ignored list!</span>");
                //chatClient.getMessageCanvas().addMessageToMessageObject(ignoreUserName + " has been romoved from ignored list!", MESSAGE_TYPE_JOIN);
            }
        }
    }
    
    /**
     * ******** Check Whether the User ignored or not ********
     * @param userName
     * @return 
     */
    protected boolean isIgnoredUser(String userName) {
        int m_listIndex = userCanvas.getIndexOf(userName);
        if (m_listIndex >= 0) {
            messageObject = listArray.get(m_listIndex);
            return messageObject.isIgnored;
        }

        /**
         * **By Default***
         */
        return false;

    }
    
}
