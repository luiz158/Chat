package chat.client;

import static chat.client.CommonSettings.*;
import chat.client.net.SocksSocket;
import chat.client.net.SocksSocketImplFactory;
import java.awt.Font;
import java.awt.Image;
import java.awt.MediaTracker;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.StringTokenizer;

/**
 *
 * @author m_hus
 */
public class ChatClient1 extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ChatClient1
     */
    public ChatClient1() {
        initComponents();
        loginToChat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        logoPanel = new javax.swing.JPanel();
        bannerPanel = new javax.swing.JPanel();
        centerPanel = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        textBoxPanel = new javax.swing.JPanel();
        lblGeneral = new javax.swing.JLabel();
        textMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        inputButtonPanel = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        emptyPanel = new javax.swing.JPanel();
        informationPanel = new javax.swing.JPanel();
        informationLabel = new javax.swing.JLabel();
        tapPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        userPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        userButtonPanel = new javax.swing.JPanel();
        btnSendDirect = new javax.swing.JButton();
        btnIgnoreUser = new javax.swing.JButton();
        roomPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        roomButtonPanel = new javax.swing.JPanel();
        roomCountPanel = new javax.swing.JPanel();
        lblCaption = new javax.swing.JLabel();
        txtUserCount = new javax.swing.JTextField();
        btnChangeRoom = new javax.swing.JButton();
        imagesPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageCanvas = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        loginMenu = new javax.swing.JMenu();
        loginItem = new javax.swing.JMenuItem();
        disconnectItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        topPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout logoPanelLayout = new javax.swing.GroupLayout(logoPanel);
        logoPanel.setLayout(logoPanelLayout);
        logoPanelLayout.setHorizontalGroup(
            logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 852, Short.MAX_VALUE)
        );
        logoPanelLayout.setVerticalGroup(
            logoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );

        topPanel.add(logoPanel, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout bannerPanelLayout = new javax.swing.GroupLayout(bannerPanel);
        bannerPanel.setLayout(bannerPanelLayout);
        bannerPanelLayout.setHorizontalGroup(
            bannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 852, Short.MAX_VALUE)
        );
        bannerPanelLayout.setVerticalGroup(
            bannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );

        topPanel.add(bannerPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setLayout(new java.awt.BorderLayout());

        inputPanel.setLayout(new java.awt.BorderLayout());

        textBoxPanel.setLayout(new java.awt.BorderLayout());

        lblGeneral.setText("General Message! ");
        textBoxPanel.add(lblGeneral, java.awt.BorderLayout.WEST);
        textBoxPanel.add(textMessage, java.awt.BorderLayout.CENTER);

        btnSend.setText("Send Message!");
        textBoxPanel.add(btnSend, java.awt.BorderLayout.LINE_END);

        inputPanel.add(textBoxPanel, java.awt.BorderLayout.CENTER);

        inputButtonPanel.setLayout(new java.awt.BorderLayout());

        btnExit.setText("Exit Chat");
        inputButtonPanel.add(btnExit, java.awt.BorderLayout.PAGE_START);

        inputPanel.add(inputButtonPanel, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        inputPanel.add(emptyPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.add(inputPanel, java.awt.BorderLayout.PAGE_END);

        informationPanel.setLayout(new java.awt.BorderLayout());

        informationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationLabel.setText("Information Label");
        informationPanel.add(informationLabel, java.awt.BorderLayout.LINE_END);

        centerPanel.add(informationPanel, java.awt.BorderLayout.NORTH);

        tapPanel.setLayout(new java.awt.BorderLayout());

        userPanel.setLayout(new java.awt.BorderLayout());

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        userPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        userButtonPanel.setLayout(new java.awt.BorderLayout());

        btnSendDirect.setText("Send Direct Message");
        userButtonPanel.add(btnSendDirect, java.awt.BorderLayout.NORTH);

        btnIgnoreUser.setText("Ignore User");
        userButtonPanel.add(btnIgnoreUser, java.awt.BorderLayout.SOUTH);

        userPanel.add(userButtonPanel, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("User   ", userPanel);

        roomPanel.setLayout(new java.awt.BorderLayout());

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList2);

        roomPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        roomButtonPanel.setLayout(new java.awt.BorderLayout());

        roomCountPanel.setLayout(new java.awt.BorderLayout());

        lblCaption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaption.setText("ROOM COUNT");
        lblCaption.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roomCountPanel.add(lblCaption, java.awt.BorderLayout.NORTH);

        txtUserCount.setEditable(false);
        txtUserCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomCountPanel.add(txtUserCount, java.awt.BorderLayout.CENTER);

        btnChangeRoom.setText("Change Room");
        roomCountPanel.add(btnChangeRoom, java.awt.BorderLayout.PAGE_END);

        roomButtonPanel.add(roomCountPanel, java.awt.BorderLayout.PAGE_START);

        roomPanel.add(roomButtonPanel, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Rooms", roomPanel);

        javax.swing.GroupLayout imagesPanelLayout = new javax.swing.GroupLayout(imagesPanel);
        imagesPanel.setLayout(imagesPanelLayout);
        imagesPanelLayout.setHorizontalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 237, Short.MAX_VALUE)
        );
        imagesPanelLayout.setVerticalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Images", imagesPanel);

        tapPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        centerPanel.add(tapPanel, java.awt.BorderLayout.LINE_END);

        jScrollPane2.setViewportView(messageCanvas);

        centerPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        loginMenu.setText("Login");

        loginItem.setText("Login");
        loginMenu.add(loginItem);

        disconnectItem.setText("Logout");
        loginMenu.add(disconnectItem);
        loginMenu.add(jSeparator1);

        exitItem.setText("Exit");
        loginMenu.add(exitItem);

        menuBar.add(loginMenu);

        helpMenu.setText("Help");

        aboutItem.setText("About");
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatClient1().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JPanel bannerPanel;
    private javax.swing.JButton btnChangeRoom;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIgnoreUser;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendDirect;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenuItem disconnectItem;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel imagesPanel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JPanel inputButtonPanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCaption;
    private javax.swing.JLabel lblGeneral;
    private javax.swing.JMenuItem loginItem;
    private javax.swing.JMenu loginMenu;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextPane messageCanvas;
    private javax.swing.JPanel roomButtonPanel;
    private javax.swing.JPanel roomCountPanel;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JPanel tapPanel;
    private javax.swing.JPanel textBoxPanel;
    private javax.swing.JTextField textMessage;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtUserCount;
    private javax.swing.JPanel userButtonPanel;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables

    private void loginToChat() {
        /**
         * ******* Open the Dialog ********
         */
        dialog = new InformationDialog(this);
        if (dialog.isConnect) {
            userName = dialog.getTxtUserName();
            //UserRoom 	= dialog.roomchoice.getSelectedItem();
            serverName = dialog.getTxtServerName();
            ServerPort = Integer.parseInt(dialog.getTxtServerPort());
            if (dialog.isProxyCheckBox()) {//getState()
                isProxy = true;
                proxyHost = dialog.getTxtProxyHost();
                ProxyPort = Integer.parseInt(dialog.getTxtProxyPort());
            } else {
                isProxy = false;
            }
            connectToServer();
        }
    }

    private void connectToServer() {
        /**
         * *********Initialize the Socket******
         */
        messageCanvas.setText("");//clearAll();
        messageCanvas.setText(messageCanvas.getText() + "Connecting To Server... Please Wait...");
        //messageCanvas.addMessageToMessageObject("Connecting To Server... Please Wait...",MESSAGE_TYPE_ADMIN);
        try {
            if (isProxy) {
                /**
                 * *******Proxy**********
                 */
                SocksSocketImplFactory factory = new SocksSocketImplFactory(proxyHost, ProxyPort);
                SocksSocket.setSocketImplFactory(factory);
                socket = new SocksSocket(serverName, ServerPort);
                socket.setSoTimeout(0);
            } else {
                /**
                 * *****Not Proxy********
                 */
                socket = new Socket(serverName, ServerPort);
            }
            dataoutputstream = new DataOutputStream(socket.getOutputStream());
            sendMessageToServer("HELO " + userName);
            datainputstream = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            //datainputstream  = new DataInputStream(socket.getInputStream());

            /**
             * *********Send HELO To Server *********
             */
            startFlag = true;
            thread = new Thread(this);
            thread.start();
            enableAll();
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_NULL);
            ie.printStackTrace();
        }
    }

    private void sendMessageToServer(String Message) {
        try {
            dataoutputstream.writeBytes(Message + "\r\n");
        } catch (IOException ie) {
            quitConnection(QUIT_TYPE_DEFAULT);
            ie.printStackTrace();
        }
    }

    private void quitConnection(int quitType) {
        if (socket != null) {
            try {
                if (quitType == QUIT_TYPE_DEFAULT) {
                    sendMessageToServer("QUIT " + userName + "~" + userRoom);
                }
                if (quitType == QUIT_TYPE_KICK) {
                    sendMessageToServer("KICK " + userName + "~" + userRoom);
                }
                socket.close();
                socket = null;
                tappanel.UserCanvas.ClearAll();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (thread != null) {
            thread.interrupt();	//thread.stop();
            thread = null;
        }
        disableAll();
        startFlag = false;
        //   setAppletStatus("ADMIN: CONNECTION TO THE SERVER CLOSED.");
    }

    /**
     * Function To Disable All Components
     */
    private void disableAll() {
        textMessage.setEnabled(false);
        btnSend.setEnabled(false);
        tappanel.setEnabled(false);//enable(false);
        disconnectItem.setEnabled(false);
        loginItem.setEnabled(true);

        userName = "";
        userRoom = "";
        totalUserCount = 0;
    }

    /**
     * Function To Enable All Components
     */
    private void enableAll() {
        textMessage.setEnabled(true);
        btnSend.setEnabled(true);
        tappanel.setEnabled(true);
        disconnectItem.setEnabled(true);
        loginItem.setEnabled(false);
    }

    int ServerPort, ProxyPort, iconCount, totalUserCount;
    protected int privateWindowCount;
    private int g_ILoop;
    String userName, userRoom, serverName, appletStatus, chatLogo, bannerName, proxyHost, serverData, roomList, splitString;
    StringBuffer stringbuffer;
    Image imgLogo, imgBanner;
    boolean startFlag, isProxy;
    Socket socket;
    BufferedReader datainputstream;//DataInputStream datainputstream;
    DataOutputStream dataoutputstream;
    MediaTracker tracker;
    Image[] iconArray; //Icon[] iconArray;
    Thread thread;
    StringTokenizer tokenizer;
    TapPanel tappanel;
    Font textFont;
    protected PrivateChat[] privateWindow;
    InformationDialog dialog;

    @Override
    public void run() {
//        while (thread != null) {
//            try {
//                serverData = datainputstream.readLine();
//                String RFCinitial = serverData.substring(0, 4);
//                switch (RFCinitial) {
//                    /**
//                     * LIST UserName;UserName; RFC Coding
//                     */
//                    case "LIST":
//                        tokenizer = new StringTokenizer(serverData.substring(5), ";");
//                        /**
//                         * Update the Information Label
//                         */
//                        totalUserCount = tokenizer.countTokens();
//                        updateInformationLabel();
//                        /**
//                         * ********Add User Item into User Canvas ********
//                         */
//                        tappanel.userCanvas.clearAll();
//                        while (tokenizer.hasMoreTokens()) {
//                            tappanel.userCanvas.AddListItemToMessageObject(tokenizer.nextToken());
//                        }
//                        messageCanvas.clearAll();
//                        messageCanvas.addMessageToMessageObject("Welcome To The " + userRoom + " Room!", MESSAGE_TYPE_JOIN);
//                        break;
//                    /**
//                     * Room Rfc
//                     */
//                    case "ROOM":
//                        /**
//                         * ******** Loading Room List in to Room Canvas *************
//                         */
//                        tokenizer = new StringTokenizer(serverData.substring(5), ";");
//                        userRoom = tokenizer.nextToken();
//                        updateInformationLabel();
//                        /**
//                         * ********Add User Item into User Canvas ********
//                         */
//                        tappanel.roomCanvas.clearAll();
//                        tappanel.roomCanvas.AddListItemToMessageObject(userRoom);
//                        while (tokenizer.hasMoreTokens()) {
//                            tappanel.roomCanvas.AddListItemToMessageObject(tokenizer.nextToken());
//                        }
//                        break;
//                    /**
//                     * ADD RFC
//                     */
//                    case "ADD":
//                        /**
//                         * Update the Information Label
//                         */
//                        totalUserCount++;
//                        updateInformationLabel();
//
//                        /**
//                         * Add User Item into User Canvas
//                         */
//                        splitString = serverData.substring(5);
//                        enablePrivateWindow(splitString);
//                        tappanel.userCanvas.AddListItemToMessageObject(splitString);
//                        messageCanvas.addMessageToMessageObject(splitString + " joins chat...", MESSAGE_TYPE_JOIN);
//                        break;
//                    /**
//                     * If User Name Already Exists
//                     */
//                    case "EXIS":
//                        messageCanvas.addMessageToMessageObject(" User Name Already Exists... Try Again With Some Other Name!", MESSAGE_TYPE_ADMIN);
//                        thread = null;
//                        quitConnection(QUIT_TYPE_NULL);
//                        break;
//                    /**
//                     * REMOVE User RFC Coding
//                     */
//                    case "REMO":
//                        splitString = serverData.substring(5);
//
//                        tappanel.userCanvas.RemoveListItem(splitString);
//                        removeUserFromPrivateChat(splitString);
//                        messageCanvas.addMessageToMessageObject(splitString + " has been logged Out from Chat!", MESSAGE_TYPE_LEAVE);
//
//                        /**
//                         * Update the Information Label
//                         */
//                        totalUserCount--;
//                        updateInformationLabel();
//                        break;
//                    /**
//                     * MESS RFC Coding Starts
//                     */
//                    case "MESS":
//                        /**
//                         * ** Chk whether ignored user ********
//                         */
//                        if (!(tappanel.userCanvas.IsIgnoredUser(serverData.substring(5, serverData.indexOf(":"))))) {
//                            messageCanvas.addMessageToMessageObject(serverData.substring(5), MESSAGE_TYPE_DEFAULT);
//                        }
//                        break;
//                    /**
//                     * KICK RFC Starts
//                     */
//                    case "KICK":
//                        messageCanvas.addMessageToMessageObject("You are Kicked Out From Chat for flooding the message!", MESSAGE_TYPE_ADMIN);
//                        thread = null;
//                        quitConnection(QUIT_TYPE_KICK);
//                        break;
//                    /**
//                     * INKI RFC (Information about kicked off User
//                     */
//                    case "INKI":
//                        splitString = serverData.substring(5);
//                        tappanel.userCanvas.RemoveListItem(splitString);
//                        removeUserFromPrivateChat(splitString);
//                        messageCanvas.addMessageToMessageObject(splitString + " has been kicked Out from Chat by the Administrator!", MESSAGE_TYPE_ADMIN);
//
//                        /**
//                         * Update the Information Label
//                         */
//                        totalUserCount--;
//                        updateInformationLabel();
//                        break;
//                    /**
//                     * Change Room RFC
//                     */
//                    case "CHRO":
//                        userRoom = serverData.substring(5);
//                        break;
//                    /**
//                     * Join Room RFC
//                     */
//                    case "JORO":
//                        splitString = serverData.substring(5);
//                        tappanel.userCanvas.AddListItemToMessageObject(splitString);
//                        /**
//                         * Update the Information Label
//                         */
//                        totalUserCount++;
//                        updateInformationLabel();
//
//                        messageCanvas.addMessageToMessageObject(splitString + " joins chat...", MESSAGE_TYPE_JOIN);
//                        break;
//                    /**
//                     * Leave Room RFC
//                     */
//                    case "LERO":
//                        splitString = serverData.substring(5, serverData.indexOf("~"));
//                        tappanel.userCanvas.RemoveListItem(splitString);
//                        messageCanvas.addMessageToMessageObject(splitString + " has leaves " + userRoom + " Room and join into " + serverData.substring(serverData.indexOf("~") + 1) + " Room", MESSAGE_TYPE_ADMIN);
//
//                        /*
//                     *	Update the Information Label
//                         */
//                        totalUserCount--;
//                        updateInformationLabel();
//                        break;
//                    /**
//                     * Room Count RFC
//                     */
//                    case "ROCO":
//                        splitString = serverData.substring(5, serverData.indexOf("~"));
//                        tappanel.txtUserCount.setText("Total Users in " + splitString + " : " + serverData.substring(serverData.indexOf("~") + 1));
//                        break;
//                    /**
//                     * Private Message RFC
//                     */
//                    case "PRIV":
//                        splitString = serverData.substring(5, serverData.indexOf(":"));
//                        /**
//                         * Check whether ignored user
//                         */
//                        if (!(tappanel.userCanvas.IsIgnoredUser(splitString))) {
//                            boolean PrivateFlag = false;
//
//                            for (g_ILoop = 0; g_ILoop < privateWindowCount; g_ILoop++) {
//                                if (privateWindow[g_ILoop].userName.equals(splitString)) {
//                                    privateWindow[g_ILoop].addMessageToMessageCanvas(serverData.substring(5));
//                                    privateWindow[g_ILoop].setVisible(true);
//                                    privateWindow[g_ILoop].requestFocus();
//                                    PrivateFlag = true;
//                                    break;
//                                }
//                            }
//
//                            if (!(PrivateFlag)) {
//                                if (privateWindowCount >= MAX_PRIVATE_WINDOW) {
//                                    messageCanvas.addMessageToMessageObject("You are Exceeding private window limit! So you may lose some message from your friends!", MESSAGE_TYPE_ADMIN);
//                                } else {
//                                    privateWindow[privateWindowCount++] = new PrivateChat(this, splitString);
//                                    privateWindow[privateWindowCount - 1].addMessageToMessageCanvas(serverData.substring(5));
//                                    privateWindow[privateWindowCount - 1].setVisible(true);
//                                    privateWindow[privateWindowCount - 1].requestFocus();
//                                }
//                            }
//                        }
//                        break;
//                }
//            } catch (Exception e) {
//                messageCanvas.addMessageToMessageObject(e.getMessage(), MESSAGE_TYPE_ADMIN);
//                quitConnection(QUIT_TYPE_DEFAULT);
//            }
//        }
    }

    /**
     * Function To Update the Information Label
     */
    public void addMessageToMessageObject() {

    }

    private void updateInformationLabel() {
        stringbuffer = new StringBuffer();
        stringbuffer.append("User Name: ");
        stringbuffer.append(userName);
        stringbuffer.append("       ");
        stringbuffer.append("Room Name: ");
        stringbuffer.append(userRoom);
        stringbuffer.append("       ");
        stringbuffer.append("No. Of Users: ");
        stringbuffer.append(totalUserCount);
        stringbuffer.append("       ");
        informationLabel.setText(stringbuffer.toString());
    }
}
